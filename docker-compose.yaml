services:
  frontend:
    build: frontend
    init: true
    ports:
      - "3000:3000"
    environment:
      # Reason for override:
      #  * Requests from server cannot access host "localhost"
      #  * Requests from user agent cannot access host "server"
      API_URL_SERVER_OVERRIDE: http://server:8080/api

  server:
    build:
      context: backend
      dockerfile: server.dockerfile
    init: true
    ports:
      - "8080:8080"
      - "40000:40000" # debugger port
    depends_on:
      database-postgres:
        condition: service_healthy
      database-influx:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SERVER_URL: localhost:8080
      PORT: 8080
      MAIN_DOMAIN: "" # must be empty for localhost
      REDIRECT_URL: http://localhost:3000/dashboard
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_OPTS: sslmode=disable # sslmode=require for prod
      INFLUXDB_URL: http://database-influx:8086
      INFLUXDB_TOKEN: 9uNp_AJQknsl8OWY65VGyAVZ0wpLXrm9Ep9_4L4-LJJWkP4HJxQvgMCd0vIElfFVU-9cIMdPgPGuUZvaDJsn5g==
      INFLUXDB_ORG: beeci
      INFLUXDB_BUCKET: home
      INFLUXDB_ENABLED: true

  gh-updater:
    build:
      context: backend
      dockerfile: gh-updater.dockerfile
    init: true
    depends_on:
      database-postgres:
        condition: service_healthy
      database-influx:
        condition: service_healthy
    env_file:
      - .env
    environment:
      REDIRECT_URL: http://localhost:3000/dashboard
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_OPTS: sslmode=disable # sslmode=require for prod
      REDIS_ADDRESS: ${REDIS_ADDRESS}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USE_TLS: false

  database-redis:
    image: redis:7.4-alpine3.20
    volumes:
      - bee-redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 3s
      retries: 3
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  database-postgres:
    image: postgres:17.0-alpine3.20
    ports:
      - "5432:5432" # only needed to connect to the database during local development
    volumes:
      - bee-postgres-data:/var/lib/postgresql/data
      - ./backend/sql-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 3s
      timeout: 3s
      retries: 3
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

  backend-executor:
    build: backend-executor
    init: true
    depends_on:
      database-postgres:
        condition: service_healthy
      database-influx:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

  database-influx:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086" # only needed to connect to the database during local development
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: beeci
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
    volumes:
      - type: volume
        source: bee-influx-data
        target: /var/lib/influxdb2
      - type: volume
        source: bee-influx-config
        target: /etc/influxdb2
    healthcheck:
      test: [ "CMD-SHELL", "influx ping" ]
      interval: 2s
      timeout: 2s
      retries: 3

volumes:
  bee-influx-data:
  bee-influx-config:
  bee-postgres-data:
  bee-redis-data:
